/**
 * @test ScopeTest
 * @imports ScopeBase
 * @imports ScopeObject
 */

//@public
function test_BasefromBase() {
	assertEquals("protectedBase", new ScopeBase().baseProtected("protectedBase"));
	assertEquals("staticBase", new ScopeBase().baseProtected("staticBase"));
	assertEquals("protectedBase", new ScopeBase().baseProtected("protectedScope"));
	assertEquals("staticBase", new ScopeBase().baseProtected("staticScope"));
	
	assertEquals("protectedBase", new ScopeBase().baseStatic("protectedBase"));
	assertEquals("staticBase", new ScopeBase().baseStatic("staticBase"));
	assertEquals("protectedBase", new ScopeBase().baseStatic("protectedScope"));
	assertEquals("staticBase", new ScopeBase().baseStatic("staticScope"));
}

//@public
function test_SubfromBase() {
	assertEquals("protectedBase", new ScopeObject().baseProtected("protectedBase"));
	assertEquals("staticBase", new ScopeObject().baseProtected("staticBase"));
	assertEquals("protectedBase", new ScopeObject().baseProtected("protectedScope"));
	assertEquals("staticBase", new ScopeObject().baseProtected("staticScope"));
	
	assertEquals("protectedBase", new ScopeObject().baseStatic("protectedBase"));
	assertEquals("staticBase", new ScopeObject().baseStatic("staticBase"));
	assertEquals("protectedBase", new ScopeObject().baseStatic("protectedScope"));
	assertEquals("staticBase", new ScopeObject().baseStatic("staticScope"));
}

//@public
function test_SubfromSub() {
	assertEquals("protectedBase", new ScopeObject().subProtected("protectedBase"));
	assertEquals("staticBase", new ScopeObject().subProtected("staticBase"));
	assertEquals("protectedScope", new ScopeObject().subProtected("protectedScope"));
	assertEquals("staticScope", new ScopeObject().subProtected("staticScope"));
	
	assertEquals("protectedBase", new ScopeObject().subStatic("protectedBase"));
	assertEquals("staticBase", new ScopeObject().subStatic("staticBase"));
	assertEquals("protectedScope", new ScopeObject().subStatic("protectedScope"));
	assertEquals("staticScope", new ScopeObject().subStatic("staticScope"));
}
