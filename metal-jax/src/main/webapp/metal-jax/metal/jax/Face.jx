/**
 * @class metal.jax.Face
 * @imports System
 * 
 * @copyright Jay Tang 2012
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */

//@private
function initClass() {
	if (this.content) {
		this.$model = System.parseHTML(this.content);
		parseModel.call(this, this.$model);
		delete this.content;
	}
}

//@static
function parseModel(node) {
	for (var i = 0; i < node.childNodes.length; i++) {
		var childNode = node.childNodes[i];
		if (childNode.nodeType == 1) {
			parseNode.call(this, childNode);
			parseModel.call(this, childNode);
		}
	}
}

//@static
function initModel(node, args) {
	var index = 0;
	if ((!args || args.length == 0) && node) {
		this.node = node = node.cloneNode(true);
	} else if (args.length > 0) {
		this.node = args[0];
		index = System.indexOfFirstChild(this.node);
		if (index >= 0) {
			node = this.node;
		} else if (node) {
			node = node.cloneNode(true);
		}
	}
	if (node) {
		initModel_.call(this, node);
		if (index < 0) {
			System.clearHTML(this.node);
			this.node.appendChild(node);
		}
	}
}

//@private
function initModel_(node) {
	for (var i = 0; i < node.childNodes.length; i++) {
		var childNode = node.childNodes[i];
		if (childNode.nodeType == 1) {
			if (!this.getClass().initNode.call(this, childNode)) {
				initModel_.call(this, childNode);
			}
		}
	}
}

//@private
function parseNode(node) {
	if (node.parentNode.nodeName.toLowerCase() != "body" && !node.parentNode.offsetParent) {
		if (node.nodeName.toLowerCase() == "img") {
			node.src = resolvePath(node.attributes["alt"].value||node.attributes["src"].value, this);
		} else if (node.nodeName.toLowerCase() == "link") {
			System.docHead.appendChild(node);
			node.href = resolvePath(node.attributes["href"].value, this);
		}
	}
	if (node.id) {
		var parts = node.id.split(":"), nodeId = parts.shift();
		var className = parts.join(":");
		var baseName = System.parseBaseName(className);
		
		if (className) {
			className = System.parseSourceName(className, this.$static.getName(), $("faceType"));
			this.$setting[baseName] = className;
			this.$context.loadClass(className);
		}
	}
}

//@static
function initNode(node) {
	if (node.id) {
		var parts = node.id.split(":"), nodeId = parts.shift();
		var className = parts.join(":");
		var baseName = System.parseBaseName(className);
		
		this.nodes = this.nodes || {};
		this.nodes[nodeId] = node;
		className = className && this.getClass().$(baseName) || className;
		var childClass = this.getClass().getContext().findClass(className);
		if (node.title == nodeId) {
			var title = this.getClass().$(nodeId+".title");
			if (title) node.title = title;
		}
		if (childClass && childClass.extendsClass(Face)) {
			var index = System.indexOfFirstChild(node);
			if (index < 0) System.clearHTML(node);
			this.faces = this.faces || {};
			this.faces[nodeId] = new childClass(node);
			return true;
		} else if (node.childNodes.length == 1 && node.firstChild.nodeType == 3 && node.innerHTML == nodeId) {
			var value = this.getClass().$(nodeId+".value");
			if (value) node.innerHTML = value;
			return true;
		}
	}
}

//@private
function resolvePath(path, scope) {
	var fromBase = path && path.indexOf("../") == 0;
	var sourceModule = scope.$static.$("module");
	var sourcePath = scope.$static.$("path");
	if (fromBase) {
		path = System.splitPath(path, 0, 1 - sourcePath.split("/").length);
	} else {
		path = System.resolvePath(path, sourcePath);
	}
	return System.resolvePath(path, sourceModule + "/");
}

//@private
var _events_ = [
	"keydown", "keypress", "keyup",
	"click", "dblclick",
	"mousedown", "mousemove", "mouseout", "mouseover", "mouseup"
];

//@public
function bind(action, node, event) {
	var binding = System.callback.call(this, dispatch, action, node);
	if (node && event) System.toggleEvent(event, node, binding);
	return binding;
}

//@private
function dispatch(action, node, event) {
	var status = action.call(this, node, event);
	if (status) return true;
	
	/*stop propagation*/
	if (event.stopPropagation) event.stopPropagation();
	event.cancelBubble = true;
	
	/*prevent default action in FF*/
	if (event.preventDefault) event.preventDefault();
	
	/*false to prevent default action in IE*/
	return false;
}
