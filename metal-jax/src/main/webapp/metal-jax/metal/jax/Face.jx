/**
 * @resource Face
 * @imports System
 * 
 * @copyright Jay Tang 2012
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */

//@private
function initClass() {
	$protected.document = window.document;
}

//@private
function initResource(target, source) {
	if (source.$imports) {
		for (var name in source.$imports) {
			target.$imports[name] = source.$imports[name];
		}
	}
	if (source.$requires) {
		for (var name in source.$requires) {
			target.$requires[name] = source.$requires[name];
		}
	}
}

//@static
function fromResource(name) {
	return new this(copyResource(name, this));
}

//@private
function copyResource(name, clazz) {
	return clazz.findResource(name, true).cloneNode(true);
}

//@static
function parseModel(source, model) {
	for (var i = 0; i < model.childNodes.length; i++) {
		var childNode = model.childNodes[i];
		if (childNode.nodeType == 1) {
			(this.$protected||$protected).parseNode(source, childNode);
			(this.$static||$static).parseModel(source, childNode);
		}
	}
}

//@protected
function parseNode(source, node) {
	if (node.parentNode.nodeName.toLowerCase() != "body" && !node.parentNode.offsetParent) {
		if (node.nodeName.toLowerCase() == "img") {
			node.src = resolvePath(node.attributes["alt"].value||node.attributes["src"].value, source);
		} else if (node.nodeName.toLowerCase() == "link") {
			System.docHead.appendChild(node);
			node.href = resolvePath(node.attributes["href"].value, source);
		}
	}
	if (node.id) {
		var parts = node.id.split(":"), nodeId = parts.shift();
		if (parts.length) {
			var name = System.parseSourceName(parts[0], source.name);
			var className = parts.length > 1 && (parts[1]||name) || Face.getName();
			source.$imports = source.$imports || {};
			source.$imports[className] = className;
			if (name) {
				source.$requires = source.$requires || {};
				source.$requires[name] = className;
			}
			node.id = [nodeId, name, className].join(":");
		}
	}
}

//@private
function initObject(object, node) {
	if (node) {
		object.node = node;
		object.nodes = {};
		this.$static.initModel(object, node);
	}
}

//@static
function initModel(object, model) {
	for (var i = 0; i < model.childNodes.length; i++) {
		var childNode = model.childNodes[i];
		if (childNode.nodeType == 1) {
			if (!(this.$protected||$protected).initNode(object, childNode)) {
				(this.$static||$static).initModel(object, childNode);
			}
		}
	}
}

//@protected
function initNode(object, node) {
	if (node.id) {
		var parts = node.id.split(":"), nodeId = parts.shift();
		var name = parts.length && parts[0];
		var className = parts.length && parts[1];
		var childClass = object.getClass().getContext().findClass(className);
		
		object.nodes[nodeId] = node;
		if (node.title == nodeId) {
			var title = object.getClass().$(nodeId+".title");
			if (title) node.title = title;
		}
		if (childClass) {
			object.faces = object.faces || {};
			if (name) {
				var child = copyResource(name, childClass);
				System.clearHTML(node).appendChild(child);
			}
			object.faces[nodeId] = new childClass(node);
			return true;
		} else if (className) {
			log("warn", "class not found: ${0}", className);
		}
		if (node.childNodes.length == 1 && node.firstChild.nodeType == 3 && node.innerHTML == nodeId) {
			var value = object.getClass().$(nodeId+".value");
			if (value) node.innerHTML = value;
			return true;
		}
	}
}

//@private
function resolvePath(path, source) {
	var fromBase = path && path.indexOf("../") == 0;
	if (fromBase) {
		path = System.splitPath(path, 0, 1 - source.path.split("/").length);
	} else {
		path = System.resolvePath(path, source.path);
	}
	return System.resolvePath(path, source.module + "/");
}

//@private
var _events_ = [
	"keydown", "keypress", "keyup",
	"click", "dblclick",
	"mousedown", "mousemove", "mouseout", "mouseover", "mouseup"
];

//@protected
function toggleEvent(event, target, callback, positive) {
	positive = positive || arguments.length == 3;
	if (callback) {
		if (target.addEventListener) {
			if (positive) {
				target.addEventListener(event, callback, false);
			} else {
				target.removeEventListener(event, callback, false);
			}
		} else if (target.attachEvent) {
			event = "on"+event;
			if (positive) {
				target.attachEvent(event, callback);
			} else {
				target.detachEvent(event, callback);
			}
		} else {
			throwError("event not supported: ${0}", event);
		}
	}
	return callback;
}

//@public
function bind(event, callback, node) {
	var binding = System.callback.call(this, dispatch, callback, node);
	if (event && node) toggleEvent(event, node, binding);
	return binding;
}

//@private
function dispatch(callback, node, event) {
	var status = callback.call(this, node, event);
	if (status) return true;
	
	/*stop propagation*/
	if (event.stopPropagation) event.stopPropagation();
	event.cancelBubble = true;
	
	/*prevent default action in FF*/
	if (event.preventDefault) event.preventDefault();
	
	/*false to prevent default action in IE*/
	return false;
}
