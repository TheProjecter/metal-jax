/**
 * @resource
 * @imports Controller
 * @imports metal.jax.core.System
 * 
 * @copyright Jay Tang 2012. All rights reserved.
 */

//@protected
function initResource(scope, source) {
	if (source.$imports) {
		for (var name in source.$imports) {
			scope.$imports[name] = source.$imports[name];
		}
	}
	if (source.$requires) {
		for (var name in source.$requires) {
			scope.$requires[name] = source.$requires[name];
		}
	}
}

//@static
function copyResourceTo(name, node) {
	return moveHTML(copyResource(name, this), node);
}

//@protected
function copyResource(name, clazz) {
	return clazz.findResource(name, true).cloneNode(true);
}

//@static
function parseModel(source, node) {
	for (var i = 0; i < node.childNodes.length; i++) {
		var childNode = node.childNodes[i];
		if (childNode.nodeType == 1) {
			parseNode(source, childNode);
			parseModel(source, childNode);
		}
	}
}

//@private
function parseNode(source, node) {
	if (node.parentNode.nodeName.toLowerCase() != "body" && !node.parentNode.offsetParent) {
		if (node.nodeName.toLowerCase() == "img") {
			node.src = resolvePath(node.attributes["alt"].value||node.attributes["src"].value, source);
		} else if (node.nodeName.toLowerCase() == "link") {
			System.$head.appendChild(node);
			node.href = resolvePath(node.attributes["href"].value, source);
		}
	}
	if (node.id) {
		var parts = node.id.split(":"), nodeId = parts.shift();
		if (parts.length) {
			var name = System.parseSourceName(parts[0], source.name);
			var className = parts.length > 1 && (parts[1]||name) || $class.getName();
			className = className.split("_")[0];
			source.$imports = source.$imports || {};
			source.$imports[className] = className;
			if (source.name == name) {
				log("warn", "metal.jax.resource.cycle", name);
			} else if (name) {
				source.$requires = source.$requires || {};
				source.$requires[name] = className;
			}
			node.id = [nodeId, name, className].join(":");
		}
	}
}

//@private
function parseSetting(node) {
	var setting = {};
	var tokens = (node.className||"").split(" ");
	for (var i = 0; i < tokens.length; i++) {
		var pair = tokens[i].split(":");
		if (pair.length == 2) {
			setting[pair[0]] = pair[1];
		}
	}
	return setting;
}

//@private
function initObject(object, node, controller, content) {
	if (node) {
		object.node = node;
		object.nodes = {};
		object.controller = controller;
		controller.bind(object, node);
		initModel(this, object, node, controller);
		initContent_(this, object, content);
	}
}

//@private
function initModel(scope, object, node, controller) {
	for (var i = 0; i < node.childNodes.length; i++) {
		var childNode = node.childNodes[i];
		if (childNode.nodeType == 1) {
			var stop = initNode(object, childNode);
			controller.bind(object, childNode);
			if (!stop) {
				initModel(scope, object, childNode, controller);
			}
		}
	}
}

//@private
function initNode(object, node) {
	if (node.id) {
		var parts = node.id.split(":"), nodeId = parts.shift();
		var name = parts.length && parts[0];
		var className = parts.length && parts[1];
		var childClass = object.getClass().getContext().findClass(className);
		
		if (object.node != node) {
			object.nodes[nodeId] = node;
		}
		if (node.title == nodeId) {
			var title = object.getClass().$(nodeId+".title");
			if (title) node.title = title;
		}
		if (childClass) {
			var content;
			if (name) {
				content = new $class(node);
				clearHTML(node).appendChild(copyResource(name, $class));
			}
			object.views = object.views || {};
			object.views[nodeId] = new View(node, new childClass(), content);
			return true;
		} else if (className) {
			log("warn", "class not found: ${0}", className);
		}
		if (node.childNodes.length == 1 && node.firstChild.nodeType == 3 && node.innerHTML == nodeId) {
			var value = object.getClass().$(nodeId+".value");
			if (value) node.innerHTML = value;
			return true;
		}
	}
}

//@private
function initContent_(scope, object, content) {
	if (content) {
		scope.$protected.initContent(object, content);
		for (var nodeId in content.nodes) {
			scope.$protected.initContentNode(object, content.nodes[nodeId], nodeId);
		}
		var setting = parseSetting(object.node);
		for (var name in setting) {
			scope.$protected.initContentSetting(object, name, setting[name]);
		}
	}
}

//@protected
function initContent(object, content) {
}

//@protected
function initContentNode(object, node, nodeId) {
	if (object.nodes[nodeId]) {
		clearHTML(object.nodes[nodeId]).appendChild(node);
	}
}

//@protected
function initContentSetting(object, name, value) {
}

//@private
function resolvePath(path, source) {
	var fromBase = path && path.indexOf("../") == 0;
	if (fromBase) {
		path = System.splitPath(path, 0, 1 - source.path.split("/").length);
	} else {
		path = System.resolvePath(path, source.path);
	}
	return System.resolvePath(path, source.module + "/");
}

//@public
function setStyle(node, style, positive) {
	positive = positive || arguments.length == 2;
	var tokens = (node.className||"").split(" ");
	var length = tokens.length;
	var styles = style instanceof Array ? style : [style];
	for (var i = 0; i < styles.length; i++) {
		var index = tokens.indexOf(styles[i]);
		if (index >= 0 && !positive) {
			tokens.splice(index, 1);
		} else if (index < 0 && positive) {
			tokens.push(styles[i]);
		}
	}
	if (tokens.length != length) {
		node.className = tokens.join(" ");
	}
}

//@public
function toggleStyle(node, a, b) {
	a = a || ""; b = b || "";
	var tokens = (node.className||"").split(" ");
	var indexa = tokens.indexOf(a);
	var indexb = tokens.indexOf(b);
	if (indexa >= 0) {
		if (b && indexb < 0) {
			tokens.splice(indexa, 1, b);
		} else if (indexa != indexb) {
			tokens.splice(indexa, 1);
		}
	} else if (a) {
		if (indexb >= 0) {
			tokens.splice(indexb, 1, a);
		} else {
			tokens.push(a);
		}
	}
	if (a) {
		node.className = tokens.join(" ");
	}
}

//@public
function filterStyle(node, styles, defaultToFirst) {
	var tokens = (node.className||"").split(" ");
	for (var i = 0; i < styles.length; i++) {
		if (tokens.indexOf(styles[i]) >= 0) {
			return styles[i];
		}
	}
	return defaultToFirst && styles[0] || "";
}

//@protected
function indexOfChild(node, child) {
	for (var i = 0, c = 0; i < node.childNodes.length; i++) {
		var childNode = node.childNodes[i];
		if (childNode.nodeType == 1) {
			if (childNode == child) return c;
			else c++;
		}
	}
}

//@protected
function getChildByIndex(node, index) {
	for (var i = 0, c = 0; i < node.childNodes.length; i++) {
		var childNode = node.childNodes[i];
		if (childNode.nodeType == 1) {
			if (c == index) return childNode;
			else c++;
		}
	}
}

//@protected
function indexOfChildById(node, id) {
	for (var i = 0, c = 0; i < node.childNodes.length; i++) {
		var childNode = node.childNodes[i];
		if (childNode.nodeType == 1) {
			var tokens = (childNode.id||"").split(":");
			if (tokens[0] == id) return c;
			else c++;
		}
	}
}

//@protected
function getChildById(node, id) {
	for (var i = 0; i < node.childNodes.length; i++) {
		var childNode = node.childNodes[i];
		if (childNode.nodeType == 1) {
			var tokens = (childNode.id||"").split(":");
			if (tokens[0] == id) return childNode;
		}
	}
}

//@protected
function clearHTML(node) {
	while (node.firstChild) node.removeChild(node.firstChild);
	return node;
}

//@protected
function moveHTML(source, target) {
	while (source.firstChild) {
		target.appendChild(source.firstChild);
	}
	return target;
}

//@private
var _events_ = [
	"keydown", "keypress", "keyup",
	"click", "dblclick",
	"mousedown", "mouseup", "mousemove", "mouseout", "mouseover"
];

//@private
var _touchEvents_ = [
	"touchstart", "touchend", "touchmove", "touchenter", "touchleave", "touchcancel"
];

//@protected
function isTouchReady() {
	return typeof TouchEvent != "undefined";
}

//@public
function toggleEvent(event, callback, positive, target) {
	positive = positive || arguments.length == 2;
	target = target || System.$document;
	if (callback) {
		if (target.addEventListener) {
			if (positive) {
				target.addEventListener(event, callback, false);
			} else {
				target.removeEventListener(event, callback, false);
			}
		} else if (target.attachEvent) {
			event = "on"+event;
			if (positive) {
				target.attachEvent(event, callback);
			} else {
				target.detachEvent(event, callback);
			}
		} else {
			throwError("event not supported: ${0}", event);
		}
	}
	return callback;
}

//@public
function bindEvent(event, callback, node) {
	var binding = System.callback.call(this, dispatch, callback, node);
	if (event && node) this.toggleEvent(event, binding, true, node);
	return binding;
}

//@private
function dispatch(callback, node, event) {
	var status = callback(this, node, event);
	if (status) return true;
	
	/*stop propagation*/
	if (event.stopPropagation) event.stopPropagation();
	event.cancelBubble = true;
	
	/*prevent default action in FF*/
	if (event.preventDefault) event.preventDefault();
	
	/*false to prevent default action in IE*/
	return false;
}
