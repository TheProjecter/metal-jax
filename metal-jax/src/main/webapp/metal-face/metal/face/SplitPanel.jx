/**
 * @face SplitPanel
 * 
 * @copyright Jay Tang 2012. All rights reserved.
 */

//@private
var _splitStyles_ = ["split_x", "split_y"];

//@private
var _defaultStyle_ = "split_x";

//@private
function initObject(object) {
	object.box = {};
	object.bindings = {};
	var panelStyle = filterStyle(object.node, _splitStyles_, _defaultStyle_);
	for (var name in object.nodes) {
		var node = object.nodes[name];
		switch (node.id) {
		case "divider":
			object.bind("mouseover", toggleHighlight, node);
			object.bind("mouseout", toggleHighlight, node);
			object.bindings[node.id] = object.bind("mousedown", dispatch, node);
			// fall through
		case "panel1":
		case "panel2":
			var nodeStyle = filterStyle(node, _splitStyles_, _defaultStyle_);
			toggleStyle(node, nodeStyle, panelStyle);
			break;
		}
	}
}

//@private
function dispatch(node, event) {
	switch (event.type) {
	case "mousedown":
		startResize.call(this, node, event);
		break;
	case "mousemove":
		doResize.call(this, node, event);
		break;
	case "mouseup":
		release.call(this, node, event);
		break;
	}
}

//@private
function capture(node, event) {
	toggleEvent("mousemove", document, this.bindings[node.id]);
	toggleEvent("mouseup", document, this.bindings[node.id]);
}

//@private
function release(node, event) {
	toggleEvent("mousemove", document, this.bindings[node.id], false);
	toggleEvent("mouseup", document, this.bindings[node.id], false);
}

//@private
function startResize(node, event) {
	this.box.x = event.clientX;
	this.box.y = event.clientY;
	this.box.panel1Width = this.nodes.panel1.offsetWidth;
	this.box.panel1Height = this.nodes.panel1.offsetHeight;
	this.box.panel2Width = this.nodes.panel2.offsetWidth;
	this.box.panel2Height = this.nodes.panel2.offsetHeight;
	
	capture.call(this, node, event);
}

//@private
function doResize(node, event) {
	var dx = event.clientX - this.box.x;
	var dy = event.clientY - this.box.y;
	
	var style = filterStyle(this.node, _splitStyles_, _defaultStyle_);
	switch (style) {
	case "split_y":
		setHeight.call(this, dy);
		break;
	case "split_x":
	default:
		setWidth.call(this, dx);
		break;
	}
}

//@private
function setWidth(dx) {
	var panel1Width = this.box.panel1Width + dx;
	var panel2Width = this.box.panel2Width - dx;
	if (panel1Width <= 0 || panel2Width <= 0) return;
	this.nodes.panel1.style.width = "".concat(panel1Width, "px");
	this.nodes.panel2.style.width = "".concat(panel2Width, "px");
}

//@private
function setHeight(dy) {
	var panel1Height = this.box.panel1Height + dy;
	var panel2Height = this.box.panel2Height - dy;
	if (panel1Height <= 0 || panel2Height <= 0) return;
	this.nodes.panel1.style.height = "".concat(panel1Height, "px");
	this.nodes.panel2.style.height = "".concat(panel2Height, "px");
}

//@private
function toggleHighlight() {
	toggleStyle(this.nodes.divider, "highlight");
	return true;
}
