/**
 * @face Table
 * @imports Table:html
 * @imports metal.jax.System
 */

//@private
function initClass() {
	$private._selected_ = $("style.selected", "selected");
	$private._sortable_ = $("style.sortable", "sortable");
	$private._sorted_ascending_ = $("style.sorted_ascending", "sorted_ascending");
	$private._sorted_descending_ = $("style.sorted_descending", "sorted_descending");
}

//@private
function initObject() {
	Table_html.apply(this, arguments);
	this.scroll = this.bind(scroll);
	this.compare = System.callback.call(this, compare);
	this.rows = System.copyArray(this.nodes["contentRows"].rows);
	for (var i = 0; i < this.rows.length; i++) {
		this.bind(toggleRow, this.rows[i], "click");
	}
	for (var i = 0; i < this.nodes["headerRow"].cells.length; i++) {
		var headerCell = this.nodes["headerRow"].cells[i];
		if (headerCell.className) {
			headerCell.firstChild.className = _sortable_;
			this.bind(sortColumn, headerCell, "click");
		}
	}
}

//@private
function sortColumn(headerCell) {
	if (this.selectedCell == headerCell) {
		this.sortOrder = 1 - this.sortOrder;
	} else {
		if (this.selectedCell) {
			this.selectedCell.firstChild.className = _sortable_;
		}
		this.selectedCell = headerCell;
		this.sortOrder = 0;
	}
	switch (this.sortOrder) {
	case 0:
		this.rows.sort(this.compare);
		this.selectedCell.firstChild.className = _sorted_ascending_;
		break;
	case 1:
		this.rows.reverse();
		this.selectedCell.firstChild.className = _sorted_descending_;
		break;
	}
	for (var i = 0; i < this.rows.length; i++) {
		this.nodes["contentRows"].appendChild(this.rows[i]);
	}
}

//@private
function toggleRow(row) {
	if (this.selectedRow == row) {
		this.selectedRow.className = "";
		delete this.selectedRow;
		toggleEvent("keydown", document, this.scroll, false);
	} else {
		if (this.selectedRow) {
			this.selectedRow.className = "";
		} else {
			toggleEvent("keydown", document, this.scroll);
		}
		this.selectedRow = row;
		this.selectedRow.className = _selected_;
	}
}

//@private
function scroll(node, event) {
	var keyCode = event.keyCode;
	if (keyCode == 38 || keyCode == 40) {
		var index = this.selectedRow.sectionRowIndex;
		index = index + ((keyCode == 38) ? -1 : 1);
		if (index < 0) index = this.rows.length-1;
		else if (index == this.rows.length) index = 0;
		toggleRow.call(this, this.nodes["contentRows"].rows[index]);
	} else {
		return true;
	}
}

//@private
function compare(row1, row2) {
	var value1 = getCellValue(row1.cells[this.selectedCell.cellIndex], this.selectedCell);
	var value2 = getCellValue(row2.cells[this.selectedCell.cellIndex], this.selectedCell);
	if (value1 < value2) return -1;
	if (value1 > value2) return 1;
	return 0;
}

//@private
function getCellValue(cell, headerCell) {
	return System.parseValue(cell.abbr || cell.innerHTML, headerCell.className);
}
